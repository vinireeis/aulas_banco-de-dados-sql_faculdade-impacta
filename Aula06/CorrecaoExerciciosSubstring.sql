--1. Coloque em uso o banco de dados BD_VENDAS 
USE DB_VENDAS

--2. Liste a tabela PRODUTOS, mostrando as colunas COD_PRODUTO, DESCRICAO,
--PRECO_CUSTO, PRECO_VENDA e calculando o lucro unitário (subtrair o PRECO_CUSTO
--do PRECO_VENDA );
SELECT 
	COD_PRODUTO, 
	DESCRICAO, 
	PRECO_CUSTO, 
	PRECO_VENDA, 
	PRECO_VENDA - PRECO_CUSTO AS LUCRO
FROM TB_PRODUTO


--3. Liste a tabela PRODUTOS, mostrando os campos COD_PRODUTO, DESCRICAO e
--calculando o valor total investido no estoque daquele produto ( multiplique a QTD_REAL
--pelo PRECO_CUSTO);
SELECT 
	COD_PRODUTO, 
	DESCRICAO,
	QTD_REAL * PRECO_CUSTO AS VALOR_ESTOQUE
FROM TB_PRODUTO


--4. Liste a tabela ITENSPEDIDO, mostrando as colunas NUM_PEDIDO, NUM_ITEM,
--COD_PRODUTO, PR_UNITARIO, QUANTIDADE, DESCONTO e calculando o valor de cada
--item ( multiplicar o PR_UNITARIO pela QUANTIDADE e abater o DESCONTO/100 );
SELECT 
	NUM_PEDIDO, 
	NUM_ITEM, 
	COD_PRODUTO,
	PR_UNITARIO,
	QUANTIDADE,
	DESCONTO,
	(PR_UNITARIO*QUANTIDADE) - (PR_UNITARIO*QUANTIDADE*(DESCONTO/100)) AS VALOR,
	(PR_UNITARIO*QUANTIDADE) * (1-(DESCONTO/100))
 FROM TB_ITENSPEDIDO


--5. Liste a tabela PRODUTOS, mostrando as colunas COD_PRODUTO, DESCRICAO,
--PRECO_CUSTO, PRECO_VENDA e calculando lucro estimado em reais (QTD_REAL
--multiplicada pelo lucro unitário (subtrair o PRECO_CUSTO do PRECO_VENDA ));
SELECT 
	COD_PRODUTO, 
	DESCRICAO, 
	PRECO_CUSTO, 
	PRECO_VENDA, 
	QTD_REAL * (PRECO_VENDA - PRECO_CUSTO) AS [LUCRO EM R$]
FROM TB_PRODUTO


--6. Liste a tabela PRODUTOS, mostrando os campos COD_PRODUTO, DESCRICAO,
--PRECO_CUSTO, PRECO_VENDA, calculando o lucro unitário em reais (PRECO_VENDA –
--PRECO_CUSTO) e o lucro unitário percentual ((100 *(PRECO_VENDA - PRECO_CUSTO) /
--PRECO_CUSTO)). Filtre apenas PRODUTOS com PRECO_CUSTO maior que 0.
SELECT 
	COD_PRODUTO, 
	DESCRICAO, 
	PRECO_CUSTO, 
	PRECO_VENDA, 
	PRECO_VENDA - PRECO_CUSTO AS LUCRO,
	((100 *(PRECO_VENDA - PRECO_CUSTO) / PRECO_CUSTO)) AS [LUCRO%]
FROM TB_PRODUTO
WHERE PRECO_CUSTO > 0


--6.1 SOMENTE O NOME DO PRODUTO E % DE LUCRO DO PRODUTO COM MAIOR LUCRO
SELECT TOP 1
	DESCRICAO, 
	((100 *(PRECO_VENDA - PRECO_CUSTO) / PRECO_CUSTO)) AS [LUCRO%]
FROM TB_PRODUTO
WHERE PRECO_CUSTO > 0
ORDER BY [LUCRO%] DESC


--7. Liste tabela PRODUTOS, criando campo calculado (QTD_REAL - QTD_MINIMA), e filtre os
--registros resultantes, mostrando somente aqueles que tiverem a quantidade real abaixo
--da quantidade mínima.
SELECT *, QTD_REAL - QTD_MINIMA AS ESTOQUE_FALTA FROM TB_PRODUTO
WHERE QTD_REAL < QTD_MINIMA

SELECT *, QTD_REAL - QTD_MINIMA AS ESTOQUE_FALTA FROM TB_PRODUTO
WHERE QTD_REAL - QTD_MINIMA < 0 


--8. Liste a tabela PRODUTOS, mostrando os registros que tenham quantidade real acima de
--5000;
SELECT * FROM TB_PRODUTO WHERE QTD_REAL > 5000


--9. Liste produtos com preço de venda inferior a R$0,50;
SELECT * FROM TB_PRODUTO WHERE PRECO_VENDA < 0.50


--10. Liste a tabela PEDIDOS com valor total (VLR_TOTAL) acima de R$15.000,00;
SELECT * FROM TB_PEDIDO WHERE VLR_TOTAL > 15000

SELECT * FROM TB_PEDIDO 
ORDER BY VLR_TOTAL DESC

--11. Liste produtos com QTD_REAL entre 500 e 1000 unidades;
SELECT * FROM TB_PRODUTO WHERE QTD_REAL >= 500 AND QTD_REAL <= 1000

SELECT * FROM TB_PRODUTO WHERE QTD_REAL BETWEEN 500 AND 1000

--12. Liste pedidos com valor total entre R$15.000,00 e R$25.000,00;
SELECT * FROM TB_PEDIDO
WHERE VLR_TOTAL BETWEEN 15000 AND 25000 

--13. Liste produtos com quantidade real acima de 5000 e código do tipo igual a 6;
SELECT * FROM TB_PRODUTO
WHERE QTD_REAL > 5000 AND COD_TIPO = 6

SELECT * FROM TB_PRODUTO
ORDER BY QTD_REAL

--14. Liste produtos com quantidade real acima de 5000 ou código do tipo igual a 6;
SELECT * FROM TB_PRODUTO
WHERE QTD_REAL > 5000 OR COD_TIPO = 6


--15. Liste pedidos com valor total inferior a R$100,00 ou acima de R$100.000,00;
SELECT * FROM TB_PEDIDO
WHERE VLR_TOTAL < 100 OR VLR_TOTAL > 100000

SELECT * FROM TB_PEDIDO
WHERE VLR_TOTAL NOT BETWEEN 100 AND 100000

--16. Liste produtos com QTD_REAL menor que 500 ou maior que 1000.
SELECT * FROM TB_PRODUTO
WHERE QTD_REAL < 500 OR QTD_REAL > 1000
ORDER BY QTD_REAL

SELECT * FROM TB_PRODUTO
WHERE QTD_REAL NOT BETWEEN 500 AND 1000
ORDER BY QTD_REAL

--17. Liste clientes do estado de São Paulo (SP);
SELECT NOME FROM TB_CLIENTE
WHERE ESTADO = 'SP'

SELECT * FROM TB_CLIENTE
WHERE ESTADO IN ('SP')

--18. Liste clientes dos estados de Minas Gerais "e" (e querendo dizer ou) Rio de Janeiro (MG, RJ);
SELECT * FROM TB_CLIENTE
WHERE ESTADO = 'MG' or ESTADO = 'RJ'

SELECT * FROM TB_CLIENTE
WHERE ESTADO IN ('MG','RJ')


--19. Liste clientes dos estados de São Paulo, Minas Gerais "e" (e querendo dizer ou)  Rio de Janeiro (SP, MG, RJ);
SELECT * FROM TB_CLIENTE
WHERE ESTADO = 'SP' or ESTADO = 'MG' or ESTADO = 'RJ'

SELECT * FROM TB_CLIENTE
WHERE ESTADO IN ('SP','MG','RJ')

--20. Liste os vendedores com o nome LEIA;
SELECT * FROM TB_VENDEDOR
WHERE NOME = 'LEIA'

--21. Liste todos os clientes que tenham NOME começando com BRINDES;
SELECT * FROM TB_CLIENTE
WHERE NOME LIKE 'BRINDES%'

SELECT * FROM TB_CLIENTE 
WHERE CHARINDEX('BRINDES', NOME) =  1

--22. Liste todos os clientes que tenham NOME terminando com BRINDES;
SELECT * FROM TB_CLIENTE
WHERE NOME LIKE '%BRINDES'

SELECT * FROM TB_CLIENTE
WHERE RIGHT(NOME,7) = 'BRINDES' 

--23. Liste todos os clientes que tenham NOME contendo BRINDES;
SELECT * FROM TB_CLIENTE
WHERE NOME LIKE '%BRINDES%'

SELECT * FROM TB_CLIENTE 
WHERE CHARINDEX('BRINDES', NOME) > 0 


--24. Liste todos os produtos com DESCRICAO começando por CANETA;
SELECT * FROM TB_PRODUTO
WHERE DESCRICAO LIKE 'CANETA%'

--25. Liste todos os produtos com DESCRICAO contendo SPECIAL;
SELECT * FROM TB_PRODUTO
WHERE DESCRICAO LIKE '%SPECIAL%'


--26. Liste todos os produtos com DESCRICAO terminando por GOLD;
SELECT * FROM TB_PRODUTO
WHERE DESCRICAO LIKE '%GOLD'

--27. Liste todos os clientes que tenham a letra A como segundo caractere do nome;
SELECT * FROM TB_CLIENTE
WHERE NOME LIKE '_A%'

SELECT * FROM TB_CLIENTE
WHERE SUBSTRING(NOME,2,1) = 'A'

SELECT * FROM TB_CLIENTE
WHERE RIGHT(LEFT(NOME,2),1) = 'A'

SELECT * FROM TB_CLIENTE
WHERE CHARINDEX('A', NOME,2) = 2

--28. Liste todos os produtos que tenham 0 (ZERO) como segundo caractere do campo
--COD_PRODUTO;

SELECT * FROM TB_PRODUTO
WHERE COD_PRODUTO LIKE '_0%'


--29. Liste todos os produtos que tenham a letra A como terceiro caractere do campo
--COD_PRODUTO.
SELECT * FROM TB_PRODUTO
WHERE COD_PRODUTO LIKE '__A%'

--30. Liste todos os pedidos com data de emissão anterior a Jan/2016;
SELECT * FROM TB_PEDIDO
WHERE DATA_EMISSAO < '20160101'

SELECT * FROM TB_PEDIDO
WHERE YEAR(DATA_EMISSAO) < 2016

SELECT * FROM TB_PEDIDO
ORDER BY DATA_EMISSAO

--30.1 Liste todos os pedidos com data de emissão anterior a JUN/2016;
SELECT * FROM TB_PEDIDO
WHERE DATA_EMISSAO < '20160601'

SELECT * FROM TB_PEDIDO
WHERE YEAR(DATA_EMISSAO) < 2016 OR (YEAR(DATA_EMISSAO) = 2016 AND MONTH(DATA_EMISSAO) < 6)

SELECT CONVERT(CHAR(6), DATA_EMISSAO, 112) , * FROM TB_PEDIDO
WHERE CONVERT(CHAR(6), DATA_EMISSAO, 112)  < '201606'

--31. Liste todos os pedidos com data de emissão no primeiro semestre de 2016;
SELECT * FROM TB_PEDIDO
WHERE DATA_EMISSAO BETWEEN '20160101' AND '20160630 23:59:59'

SELECT * FROM TB_PEDIDO
WHERE DATA_EMISSAO >= '20160101' AND  DATA_EMISSAO <= '20160630 23:59:59'

SELECT * FROM TB_PEDIDO
WHERE YEAR(DATA_EMISSAO) = 2016 AND MONTH(DATA_EMISSAO) <= 6

SELECT * FROM TB_PEDIDO
WHERE YEAR(DATA_EMISSAO) = 2016 AND MONTH(DATA_EMISSAO) IN (1,2,3,4,5,6)


--32. Liste todos os pedidos com data de emissão em janeiro "e" (e querendo dizer ou)  junho de 2016;
SELECT * FROM TB_PEDIDO
WHERE DATA_EMISSAO BETWEEN '20160101' AND '20160131 23:59:59'
OR DATA_EMISSAO BETWEEN '20160601' AND '20160630 23:59:59'

SELECT * FROM TB_PEDIDO
WHERE YEAR(DATA_EMISSAO) = 2016 AND MONTH(DATA_EMISSAO) IN (1,6)

--33. Liste todos os pedidos do Vendedor Código 1 em Jan/2016;
SELECT * FROM TB_PEDIDO
WHERE DATA_EMISSAO BETWEEN '20160101' AND '20160131 23:59:59'
AND CODVEN = 1

--34. Liste os códigos de clientes que efetuaram alguma compra (pedido) em Jan/2016, caso o
--cliente tenha comprado mais de uma vez aparecer cada código de cliente uma única vez.
SELECT DISTINCT CODCLI FROM TB_PEDIDO
WHERE YEAR(DATA_EMISSAO) = 2016 AND MONTH(DATA_EMISSAO) = 1


--35. Armazene o resultado do exercício 5 em uma nova tabela chamada exerc5.
SELECT 
	COD_PRODUTO, 
	DESCRICAO, 
	PRECO_CUSTO, 
	PRECO_VENDA, 
	QTD_REAL * (PRECO_VENDA - PRECO_CUSTO) AS [LUCRO EM R$]
INTO LMS.DBO.EXERC5  -- NOME_DO_BANCO.NOME_DO_SCHEMA.NOME_TABELA 
FROM TB_PRODUTO

SELECT 
	COD_PRODUTO, 
	DESCRICAO, 
	PRECO_CUSTO, 
	PRECO_VENDA, 
	QTD_REAL * (PRECO_VENDA - PRECO_CUSTO) AS [LUCRO EM R$]
INTO [1905317].DBO.EXERC5  -- NOME_DO_BANCO.NOME_DO_SCHEMA.NOME_TABELA 
FROM TB_PRODUTO

-- EXIBA EM UMA COLUNA APENAS O PRIMEIRO E ÚLTIMO NOME DOS CLIENTES CADASTRADOS NO MÊS DE OUTUBRO INDEPENDENTE DO ANO E EM UMA SEGUNDA COLUNA EXIBA A DATA DE CADASTRO NO FORMATO DD/MM. POR EXEMPLO, SE O CLIENTE FOR "APARECIDO ARCANDIU DIAS" CADASTRADO 1997-10-09 00:00:00.000, RETORNAR "APARECIDO DIAS" "09/10"
SELECT
	SUBSTRING(NOME,1,CHARINDEX(' ', NOME)-1) + RIGHT(NOME,CHARINDEX(' ', REVERSE(NOME))) AS NOME_CLIENTE,
	CONVERT(CHAR(5),DATA_CAD,103) AS DATA_CADASTRO
FROM TB_CLIENTE
WHERE MONTH(DATA_CAD) = 10


-- SELECIONO O NOME FANTASIA E O CNPJ DOS FORNECEDORES, PORÉM O CNPJ DEVE SER APRESENTADO FORMATADO COMO 99.999.999/9999-01, ATENÇÃO DECONSIDERE OS ESPAÇOS EM BRANCO CASO EXISTAM E CASO O CNPJ NÃO CONTENHA 14 CARACTERES COMPLETE COM "0" A ESQUERDA. POE EXEMPLO O CNPJ 60500121000981 DEVE SER APRESENTADO 60.500.121/0009-81 E O CNPJ 245992000117 COMO 00.245.992/0001-17.

/*SERVIDOR 54*/
SELECT NOME_FANTASIA, 
	LEFT(CNPJ_CORPO,2) + '.' +
	SUBSTRING(CNPJ_CORPO, 3,3) + '.' +
	RIGHT(CNPJ_CORPO,3) + '/' +
	CNPJ_FILIAL +'-'+
	CNPJ_DIGITOV
FROM TB_FORNECEDOR

/*SERVIDOR 18*/
SELECT 
	CNPJ,
	LEFT(RIGHT('00000000000000'+REPLACE(CNPJ,' ',''),14),2)  + '.' +
	SUBSTRING(RIGHT('00000000000000'+REPLACE(CNPJ,' ',''),14), 3,3) + '.'+
	SUBSTRING(RIGHT('00000000000000'+REPLACE(CNPJ,' ',''),14), 6,3) + '/'+
	SUBSTRING(RIGHT('00000000000000'+REPLACE(CNPJ,' ',''),14), 9,4) + '-'+
	RIGHT(RIGHT('00000000000000'+REPLACE(CNPJ,' ',''),14),2)  
FROM TB_FORNECEDOR

-- EXIBA A LISTA DE PRODUTOS CONTENDO O NOME (DESCRIÇÃO), PRECO DE CUSTO E PRECO DE VENDA, PORÉM EXIBA OS PREÇOS COM APENAS DUAS CASAS DECIMAIS UTILZANDO ARREDONDAMENTO MATEMÁTICO SIMPLES, POR EXEMPLO PRECO_CUSTO = 0.0528 DEVERÁ APARECER COMO 0.05 E PRECO_VENDA = 0.0475 DEVERÁ APARECER COMO 0.05. ORDENE OS PRODUTOS DE CUSTO MAIS BARATO ATÉ O MAIS CARO.

SELECT 
	DESCRICAO, 
	CONVERT(DECIMAL(5,2),ROUND(PRECO_CUSTO,2)) PRECO_CUSTO_TRATADO,
	CONVERT(DECIMAL(5,2),ROUND(PRECO_VENDA,2)) PRECO_VENDA_TRATADO,
	PRECO_CUSTO, PRECO_VENDA
FROM TB_PRODUTO
ORDER BY 2 --PRECO_CUSTO_TRATADO

-- SELECIONE TODAS COLUNAS DOS ITENS ENTREGUES NOS FINAIS DE SEMANA, EXIBA OS REGISTROS MAIS RECENTES PRIMEIRO.
SELECT * FROM TB_ITENSPEDIDO
WHERE DATEPART(WEEKDAY,DATA_ENTREGA) IN (1,7)
ORDER BY DATA_ENTREGA DESC


-- CONSIDERANDO QUE O TEMPO DE ENTREGA É UM MÊS APÓS A EMISSÃO DO PEDIDO, CRIE UMA LISTA QUE EXIBA O NÚMERO DO PEDIDO, VALOR A DATA DE EMISSÃO, A DATA PREVISTA DE ENTREGA E EXIBA A SITUÇÃO COMO ENTREGUE, CANCELADO E PENDENTE (ONDE E = ENTREGUE, C = CANCELADO E P = PENDENTE)
SELECT
	NUM_PEDIDO,
	VLR_TOTAL,
	DATA_EMISSAO,
	DATEADD(month,1,data_emissao) data_prevista,
	CASE SITUACAO
		WHEN 'E' THEN 'ENTREGUE'
		WHEN 'C' THEN 'CANCELADO'
		WHEN 'P' THEN 'PENDENTE'
	END AS SITUACAO
FROM TB_PEDIDO